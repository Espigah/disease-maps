{"version":3,"sources":["serviceWorker.js","pages/form/components/Question.js","pages/form/state.js","pages/form/components/Location.js","pages/form/components/LocationForm.js","pages/form/components/QuestionnaireForm.js","pages/form/helpers/geolocation.js","pages/form/components/FormForNonInfected.js","services/firebase/broker.js","services/firebase/service.js","services/firebase/index.js","pages/form/index.js","pages/maps/Map.js","pages/maps/index.js","index.js"],"names":["Boolean","window","location","hostname","match","Question","props","Grid","container","direction","justify","alignItems","RadioGroup","name","onChange","event","value","Number","currentTarget","row","FormControlLabel","control","Radio","label","initialState","infected","period","local","lastSteps","reducerActions","addStep","state","action","removeStep","default","property","defaultReducerAction","type","reducer","fn","immer","draftState","console","log","LocationForm","item","xs","TextField","id","withStyles","root","background","border","borderRadius","boxShadow","color","padding","margin","classes","className","Typography","variant","component","Location","QuestionnaireForm","onSuccess","onError","navigator","geolocation","getCurrentPosition","coords","enableHighAccuracy","maximumAge","timeout","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","db","firestore","collection","get","then","snapshot","list","forEach","doc","push","data","catch","err","Promise","reject","lat","lng","cityRef","created","FieldValue","serverTimestamp","timestamp","Date","now","infectedDays","add","service","dataList","spots","filter","map","reduce","a","b","concat","suspicions","clumping","FormPage","history","useHistory","useState","isSending","setIsSending","setCoords","useReducer","stateA","updateState","RenderForm","CircularProgress","RenderButtons","useEffect","latitude","longitude","saveLocation","error","JSON","stringify","useCallback","FormControl","class","tabindex","overflow","height","position","watchPosition","useGoogleMaps","center","zoom","ref","drawCircle","google","radius","fillColor","fillOpacity","maps","Circle","strokeOpacity","drawSpotCircle","date","drawClumpingCircle","drawSuspicionsCircle","fetchData","style","width","MapsPage","Map","ReactDOM","render","StrictMode","AppBar","Toolbar","exact","path","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b1e84aa9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nimport { FormControlLabel, Radio, RadioGroup, Grid } from \"@material-ui/core\";\n\nfunction Question(props) {\n  const handleClick = (event) => {\n    const value = Number(event.currentTarget.value);\n    props.onChange(!!value);\n  };\n\n  return (\n    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n      <RadioGroup name=\"options\" onChange={handleClick} row={true}>\n        <FormControlLabel\n          value=\"1\"\n          control={<Radio />}\n          label=\"Estou infectado\"\n        />\n        {/* <FormControlLabel\n          value=\"0\"\n          control={<Radio />}\n          label=\"Conheco alguem infectado\"\n        /> */}\n      </RadioGroup>\n    </Grid>\n  );\n}\n\nexport default Question;\n","import immer from \"immer\";\n\nconst initialState = {\n  infected: null,\n  period: null,\n  local: null,\n  lastSteps: [],\n};\n\nlet reducerActions = {\n  addStep: (state, action) => {},\n  removeStep: (state, action) => {},\n  default: (state, action) => {\n    const { value, property } = action.value;\n    state[property] = value;\n  },\n};\n\nconst defaultReducerAction = (property, value) => {\n  return {\n    type: \"default\",\n    value: {\n      property,\n      value,\n    },\n  };\n};\n\nfunction reducer(state, action) {\n  let fn = reducerActions[action.type];\n\n  if (fn) {\n    return immer(state, (draftState) => fn(draftState, action));\n  }\n\n  console.log(\"[WARNING] Action without reducer:\", action);\n  return state;\n}\n\nexport default {\n  getReducer() {\n    return reducer;\n  },\n  getInitialState() {\n    return initialState;\n  },\n  updateInfected(value) {\n    return defaultReducerAction(\"infected\", value);\n  },\n  updatePeriod(value) {\n    return defaultReducerAction(\"period\", value);\n  },\n  updateLocal({ longitude, latitude }) {\n    return defaultReducerAction(\"local\", { longitude, latitude });\n  },\n  addStep(value) {\n    return {\n      type: \"addStep\",\n      value,\n    };\n  },\n  removeStep(value) {\n    return {\n      type: \"removeStep\",\n      value,\n    };\n  },\n};\n","import React from \"react\";\n\nimport { TextField, Grid } from \"@material-ui/core\";\n\nfunction LocationForm(props) {\n  return (\n    <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"flex-start\">\n      <Grid item xs={4}>\n        <TextField id=\"code\" label=\"Cep\"  />\n      </Grid>\n      <Grid item xs={4}>\n        <TextField id=\"city\" label=\"Cidade\"   />\n      </Grid>\n      <Grid item xs={4}>\n        <TextField id=\"neighborhood\" label=\"Bairro\"  />\n      </Grid>\n      <Grid item xs={4}>\n        <TextField id=\"street\" label=\"Rua\"  />\n      </Grid>\n      <Grid item xs={2}>\n        <TextField id=\"number\" label=\"Número\"  />\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default LocationForm;\n","import React from \"react\";\n\nimport { Typography } from \"@material-ui/core\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport Location from \"./Location\";\n\nconst styles = {\n  root: {\n    background: \"linear-gradient(45deg, #6beafe 30%, #79e0ff 90%)\",\n    border: 0,\n    borderRadius: 3,\n    boxShadow: \"0 3px 5px 2px rgba(105, 165, 255, .3)\",\n    color: \"white\",\n    padding: \"5px 30px 15px 30px\",\n    margin: \"10px 5px\",\n  },\n};\n\nfunction LocationForm(props) {\n  const { classes } = props;\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h4\" component=\"h5\">\n        Onde você está agora?\n      </Typography>\n      <div>\n        <Location></Location>\n      </div>\n    </div>\n  );\n}\n\nexport default withStyles(styles)(LocationForm);\n","import React, { useState } from \"react\";\nimport Location from \"./Location\";\nfunction QuestionnaireForm() {\n  return (\n    <div>\n      <p>Tempo contamida?</p>\n      <div>\n        <p>\n          Adcione os ultimo lugares que voc frenquentou (iniciando do ultimo\n          lugar)\n        </p>\n\n        <Location></Location>\n      </div>\n    </div>\n  );\n}\n\nexport default QuestionnaireForm;\n","export default {\n  watchPosition(onSuccess, onError) {\n    const option = {\n      enableHighAccuracy: true,\n      maximumAge: 1,\n      timeout: 100,\n    };\n    const successHandler = ({ coords }) => {\n      onSuccess(coords);\n    };\n\n    navigator.geolocation.getCurrentPosition(successHandler, onError, option);\n    // navigator.geolocation.watchPosition(successHandler, onError, option);\n  },\n};\n//Everytime you call getCurrentLocation the gps is spun up which takes a few moments. If you call watchPosition and wait until you get a certain accuracy, then remove your watch you will have better results, without the overhead of a constant watch.\n","import React from \"react\";\n\nimport { Typography } from \"@material-ui/core\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport Location from \"./Location\";\n\nconst styles = {\n  root: {\n    background: \"linear-gradient(45deg, #88fe6b 30%, #53ffc7 90%)\",\n    border: 0,\n    borderRadius: 3,\n    boxShadow: \"0 3px 5px 2px rgba(128, 255, 105, .3)\",\n    color: \"white\",\n    padding: \"5px 30px 15px 30px\",\n    margin: \"10px 5px\",\n  },\n};\n\nfunction FormForNonInfected({classes}) {\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h4\" component=\"h5\">\n        Onde essa pessoa mora?\n      </Typography>\n      <div>\n        <Location></Location>\n      </div>\n    </div>\n  );\n}\n\nexport default withStyles(styles)(FormForNonInfected);\n","import firebase from \"firebase\"\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyCnt0ug9TZhcYtWn2jAQwhgwWmPxIL78xE\",\n  authDomain: \"diseasemaps-74aac.firebaseapp.com\",\n  databaseURL: \"https://diseasemaps-74aac.firebaseio.com\",\n  projectId: \"diseasemaps-74aac\",\n  storageBucket: \"diseasemaps-74aac.appspot.com\",\n  messagingSenderId: \"463180539951\",\n  appId: \"1:463180539951:web:cba2d54ebd0723da743eda\",\n  measurementId: \"G-Q5FYF1Y21R\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\n// const firebaseConfig = {\n//   apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n//   authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n//   projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n// };\n// firebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\n\nexport default db;\n","import db from \"./broker\";\nimport firebase from \"firebase\";\nimport moment from \"moment\";\n\nconst COLLECTION = \"locations\";\nexport default {\n  getCoordinates() {\n    // let citiesRef = db.collection(\"groceryLists\").limitToLast(10);\n\n    //.where(\"users[0].name', '==', 'userName')\n    let cityRef = db.collection(COLLECTION);\n    //  .where(\"users[0].name\", \"==\", \"userName\"); //.doc(\"uaDZw5I6SKWNQG7XTBBn\");\n    return cityRef\n      .get()\n      .then((snapshot) => {\n        let list = [];\n        snapshot.forEach((doc) => {\n          list.push(doc.data());\n          // console.log(doc.id, \"=>\", doc.data());\n        });\n        return list;\n      })\n      .catch((err) => {\n        console.log(\"Error getting document\", err);\n        return Promise.reject(err);\n      });\n  },\n  add({ lat, lng }) {\n    let cityRef = db.collection(COLLECTION);\n\n    let data = {\n      created: firebase.firestore.FieldValue.serverTimestamp(),\n      timestamp: Date.now(),\n      infected: true,\n      infectedDays: 1,\n      local: {\n        lat: lat,\n        lng: lng,\n      },\n      lastSteps: [],\n    };\n    return cityRef.add(data);\n  },\n};\n","import service from \"./service\";\nexport default {\n  getCoordinates() {\n    return service.getCoordinates().then((dataList) => {\n      let spots = dataList\n        .filter((data) => data.lastSteps)\n        .map((data) => data.lastSteps)\n        .reduce((a, b) => a.concat(b), []);\n\n      let suspicions = dataList\n        .filter((data) => \"infected\" in data && !data.infected)\n        .map((data) => data.local);\n\n      let clumping = [\n        {\n          lat: -22.9228481,\n          lng: -43.54955,\n        },\n      ];\n      return {\n        suspicions,\n        spots,\n        clumping,\n      };\n    });\n  },\n  add({ lat, lng }) {\n    return service.add({ lat, lng });\n  },\n};\n","import React, { useState, useCallback, useReducer, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Question from \"./components/Question\";\n\nimport stateA from \"./state\";\n\nimport FormForInfected from \"./components/FormForInfected\";\nimport FormForNonInfected from \"./components/FormForNonInfected\";\n\nimport geolocation from \"./helpers/geolocation\";\n\nimport { Grid, Button, FormControl, CircularProgress } from \"@material-ui/core\";\n\nimport firebase from \"../../services/firebase\";\n\nfunction FormPage() {\n  const history = useHistory();\n  const [isSending, setIsSending] = useState(false);\n  const [coords, setCoords] = useState(false);\n  const [state, updateState] = useReducer(\n    stateA.getReducer(),\n    stateA.getInitialState()\n  );\n\n  const handleCoords = (value) => {\n    updateState(stateA.updateInfected(value));\n    saveLocation();\n  };\n\n  const onClose = () => {\n    history.push(\"/map\");\n  };\n\n  const RenderForm = ({ infected }) => {\n    if (infected === null) {\n      return <></>;\n    }\n    return (\n      <Grid container justify=\"center\">\n        <CircularProgress />\n      </Grid>\n    );\n    if (infected) {\n      return <FormForInfected />;\n    } else {\n      return <FormForNonInfected />;\n    }\n  };\n\n  const RenderButtons = ({ infected }) => {\n    if (infected === null) {\n      return <></>;\n    }\n    return <></>;\n    return (\n      <>\n        <Button variant=\"contained\" color=\"secondary\" onClick={onClose}>\n          Fechar\n        </Button>\n        <Button variant=\"contained\" color=\"primary\">\n          Confirmar\n        </Button>\n      </>\n    );\n  };\n\n  useEffect(() => {\n    geolocation.watchPosition(\n      ({ latitude, longitude }) => {\n        setCoords({ latitude, longitude });\n        saveLocation();\n        // updateState(state.updateLocal({ latitude, longitude }));\n      },\n      (error) => {\n        console.log(JSON.stringify(error));\n      }\n    );\n  }, []);\n\n  const saveLocation = useCallback(async () => {\n    // don't send again while we are sending\n    if (isSending || !coords) return;\n    // update state\n    setIsSending(true);\n    // send the actual request\n    await firebase.add({ lat: coords.latitude, lng: coords.longitude });\n\n    history.push(\"/map\");\n  }, [isSending, coords]);\n\n  return (\n    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n      <Grid item xs={6}>\n        <FormControl class=\"w-100\">\n          <div class=\"two fields\">\n            <Question\n              onChange={handleCoords}\n              infected={state.infected}\n            ></Question>\n            <RenderForm infected={state.infected}></RenderForm>\n          </div>\n\n          <div class=\"ui button\" tabindex=\"0\">\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"space-between\"\n              alignItems=\"flex-end\"\n            >\n              <RenderButtons infected={state.infected}></RenderButtons>\n            </Grid>\n          </div>\n        </FormControl>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default FormPage;\n\n//var wpid = navigator.geolocation.watchPosition(showPosition, alert, {enableHighAccuracy:true, maximumAge:500, timeout:500});\n\n// function showPosition(position) {\n//   x.innerHTML = \"Latitude: \" + position.coords.latitude +\n//   \"<br>Longitude: \" + position.coords.longitude ;\n// }\n","import React, { useRef, useEffect } from \"react\";\nimport { Map, GoogleApiWrapper, Circle } from \"google-maps-react\";\nimport PropTypes from \"prop-types\";\n\nimport { useGoogleMaps } from \"react-hook-google-maps\";\n\nimport firebase from \"./../../services/firebase\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst styles = {\n  root: {\n    overflow: \"none\",\n    height: \"calc(100vh - 58px)\",\n    \"@media (min-width: 600px)\": {\n      height: \"calc(100vh - 67px)\",\n    },\n    \"@media (min-width: 0px) and (orientation: landscape)\": {\n      height: \"calc(100vh - 50px)\",\n    },\n  },\n};\n\nexport const Geo = ({ classes }) => {\n  const coords = { lat: -22.9228481, lng: -43.5497464 };\n  const containerStyle = {\n    height: \"100%\",\n    width: \"100%\",\n    position: \"relative\",\n    overflow: \"none\",\n  };\n\n  navigator.geolocation.getCurrentPosition((position) => {\n    console.log(position.coords);\n  });\n\n  navigator.geolocation.watchPosition(\n    (position) => {\n      debugger;\n      console.log(position.coords);\n    },\n    () => {},\n    {\n      enableHighAccuracy: true,\n      maximumAge: 500,\n      timeout: 500,\n    }\n  );\n\n  const { ref, map, google } = useGoogleMaps(\n    // Use your own API key, you can get one from Google (https://console.cloud.google.com/google/maps-apis/overview)\n    \"AIzaSyCbdYlBtAHMkrKyv4jh8vYqWRT_d6AQfas\",\n    //\"AIzaSyC4Z5Qz97EWcoCczNn2IcYvaYG0L9pe6Rk\",\n    // NOTE: even if you change options later\n    {\n      center: coords,\n      zoom: 17,\n    }\n  );\n\n  const drawCircle = ({ center, radius, fillColor, fillOpacity }) => {\n    return new window.google.maps.Circle({\n      center: center,\n      radius: radius,\n      fillColor: fillColor,\n      fillOpacity: fillOpacity,\n      map,\n      strokeOpacity: 0,\n    });\n  };\n\n  const drawSpotCircle = ({ lat, lng, date }) => {\n    console.log(\"[ drawSpotCircle ]\");\n    let spot = drawCircle({\n      center: { lat, lng },\n      radius: 5,\n      fillColor: \"#FF0000\",\n      fillOpacity: 0.5,\n    });\n\n    let contagionArea = drawCircle({\n      center: { lat, lng },\n      radius: 10,\n      fillColor: \"#FF9A9A\",\n      fillOpacity: 0.1,\n    });\n  };\n\n  const drawClumpingCircle = ({ lat, lng }) => {\n    console.log(\"[ drawClumpingCircle ]\");\n    drawCircle({\n      center: { lat, lng },\n      radius: 10,\n      fillColor: \"#FCF10A\",\n      fillOpacity: 0.3,\n    });\n  };\n\n  const drawSuspicionsCircle = ({ lat, lng }) => {\n    console.log(\"[ drawSuspicionsCircle ]\");\n    let cityCircle2 = drawCircle({\n      center: { lat, lng },\n      radius: 20,\n      fillColor: \"#33E9FF\",\n      fillOpacity: 0.05,\n    });\n  };\n\n  useEffect(() => {\n    if (!map) {\n      return;\n    }\n\n    async function fetchData() {\n      const { clumping, spots, suspicions } = await firebase.getCoordinates();\n      console.log(suspicions);\n      clumping.map(drawClumpingCircle);\n      suspicions.map(drawSuspicionsCircle);\n      spots.map(drawSpotCircle);\n    }\n    fetchData();\n  }, [map]);\n\n  return (\n    <div className={classes.root}>\n      <div ref={ref} style={containerStyle} />\n    </div>\n  );\n};\n\nexport default withStyles(styles)(Geo);\n","import React from \"react\";\nimport Map from \"./Map\";\nfunction MapsPage() {\n  return (\n    <div>\n      <Map />\n    </div>\n  );\n}\n\nexport default MapsPage;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useParams,\n} from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport FormPage from \"./pages/form\";\nimport MapsPage from \"./pages/maps\";\n\nimport {\n  Grid,\n  Button,\n  FormControl,\n  AppBar,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppBar position=\"static\">\n      {\" \"}\n      <Toolbar>\n        <Typography variant=\"h6\">Covid</Typography>\n      </Toolbar>\n    </AppBar>\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <FormPage />\n        </Route>\n        <Route path=\"/map\">\n          <MapsPage />\n        </Route>\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}